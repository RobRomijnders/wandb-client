import base64
import configparser
import json
import os
from unittest.mock import MagicMock
import sys

import boto3
import google
import kubernetes
from wandb.errors import LaunchError
import wandb.sdk.launch.launch as launch
from wandb.sdk.launch.builder.kaniko import (
    KanikoBuilder,
    _create_dockerfile_configmap,
    _wait_for_completion,
)

from .test_launch import mocked_fetchable_git_repo  # noqa: F401
from ..utils import fixture_open

import pytest


def return_kwargs(*args, **kwargs):
    return kwargs


@pytest.fixture
def mock_V1ObjectMeta(monkeypatch):
    def V1ObjectMeta_mock(**kwargs):
        return kwargs

    monkeypatch.setattr(kubernetes.client, "V1ObjectMeta", V1ObjectMeta_mock)
    yield V1ObjectMeta_mock


@pytest.fixture
def mock_V1ConfigMap(monkeypatch):
    def V1Config_mock(**kwargs):
        return kwargs

    monkeypatch.setattr(kubernetes.client, "V1ConfigMap", V1Config_mock)
    yield V1Config_mock


@pytest.fixture
def mock_boto3(monkeypatch):
    monkeypatch.setattr(boto3, "client", MagicMock())


@pytest.fixture
def mock_storage_client(monkeypatch):
    monkeypatch.setattr(google.cloud.storage, "Client", MagicMock())


def test_wait_for_completion():

    mock_api_client = MagicMock()
    mock_job = MagicMock()
    mock_job_status = MagicMock()
    mock_job.status = mock_job_status
    # test success is true
    mock_job_status.succeeded = 1
    mock_api_client.read_namespaced_job_status.return_value = mock_job
    assert _wait_for_completion(mock_api_client, "test", 60)

    # test failed is false
    mock_job_status.succeeded = None
    mock_job_status.failed = 1
    assert _wait_for_completion(mock_api_client, "test", 60) is False

    # test timeout is false
    mock_job_status.failed = None
    assert _wait_for_completion(mock_api_client, "test", 5) is False


def test_create_dockerfile_configmap(
    monkeypatch, runner, mock_V1ConfigMap, mock_V1ObjectMeta
):
    with runner.isolated_filesystem():
        os.makedirs("./test/context/path/", exist_ok=True)
        with open("./test/context/path/Dockerfile.wandb-autogenerated", "wb") as f:
            f.write(b"docker file test contents")
        result = _create_dockerfile_configmap("test_name", "./test/context/path/")
        assert result["metadata"]["name"] == "test_name"
        assert result["metadata"]["namespace"] == "wandb"
        assert result["metadata"]["labels"] == {"wandb": "launch"}
        assert result["binary_data"]["Dockerfile"] == base64.b64encode(
            b"docker file test contents"
        ).decode("UTF-8")

        assert result["immutable"] is True


def test_create_docker_ecr_config_map(
    monkeypatch, runner, mock_V1ConfigMap, mock_V1ObjectMeta
):

    build_config = {
        "cloud-provider": "AWS",
        "build-context-store": "s3",
        "credentials": {
            "secret-name": "aws-secret",
            "secret-mount-path": "/root/.aws/",
        },
    }

    expected_args = (
        "wandb",
        {
            "api_version": "v1",
            "kind": "ConfigMap",
            "metadata": {
                "name": "docker-config",
                "namespace": "wandb",
            },
            "data": {"config.json": json.dumps({"credsStore": "ecr-login"})},
        },
    )

    def check_args(*args):
        assert args == expected_args

    builder = KanikoBuilder(build_config)
    mock_client = MagicMock()
    mock_client.V1ConfigMap = mock_V1ConfigMap
    mock_client.V1ObjectMeta = mock_V1ObjectMeta
    mock_client.create_namespaced_config_map = check_args
    builder._create_docker_ecr_config_map(mock_client)


def test_upload_build_context_aws(monkeypatch, runner, mock_boto3):
    build_config = {
        "cloud-provider": "AWS",
        "build-context-store": "test-url",
        "credentials": {
            "secret-name": "aws-secret",
            "secret-mount-path": "/root/.aws/",
        },
    }
    with runner.isolated_filesystem():
        os.makedirs("./test/context/path/", exist_ok=True)
        with open("./test/context/path/blah.txt", "wb") as f:
            f.write(b"test contents")
        builder = KanikoBuilder(build_config)
        returned_path = builder._upload_build_context(
            "12345678", "./test/context/path/"
        )
        assert returned_path == "s3://test-url/12345678.tgz"


def test_upload_build_context_gcp(monkeypatch, runner, mock_storage_client):
    build_config = {
        "cloud-provider": "gcp",
        "build-context-store": "test-url",
        "credentials": {
            "secret-name": "gcp-secret",
            "secret-mount-path": "/root/.gcp/",
        },
    }
    with runner.isolated_filesystem():
        os.makedirs("./test/context/path/", exist_ok=True)
        with open("./test/context/path/blah.txt", "wb") as f:
            f.write(b"test contents")
        builder = KanikoBuilder(build_config)
        returned_path = builder._upload_build_context(
            "12345678", "./test/context/path/"
        )
        assert returned_path == "gs://test-url/12345678.tgz"


def test_upload_build_context_err(monkeypatch, runner, mock_boto3):
    build_config = {
        "cloud-provider": "bad-provider",
        "build-context-store": "test-url",
        "credentials": {
            "secret-name": "aws-secret",
            "secret-mount-path": "/root/.aws/",
        },
    }
    with runner.isolated_filesystem():
        os.makedirs("./test/context/path/", exist_ok=True)
        with open("./test/context/path/blah.txt", "wb") as f:
            f.write(b"test contents")
        builder = KanikoBuilder(build_config)
        with pytest.raises(LaunchError):
            builder._upload_build_context("12345678", "./test/context/path/")
